version: '3.8'

networks:
  default:

services:
  postgresql-db:
    container_name: postgresql-db-container
    image: postgres:17rc1-alpine
    restart: always
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456  # Fixed this
      - POSTGRES_DB=ecommerce_core
    volumes:
      - ecommerce-postgresql-db:/var/lib/postgresql/data  # Correct volume path
    networks:
      - default

  redis:
    container_name: redis-container
    image: redis:7.4.0-alpine
    ports:
      - "6379:6379"
    restart: always
    volumes:
      - redis-data:/data  # Corrected volume
    networks:
      - default

  ecommerce-spring-boot-be:
    container_name: ecommerce-spring-boot-be
    image: ecommerce-spring-boot-be:1.0 # Make sure this image exists, or build it correctly
    ports:
      - "3333:3333"
    depends_on:
      - postgresql-db
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql-db:5432/ecommerce_core?autoReconnect=true&allowPublicKeyRetrieval=true&useSSL=false  # Use the correct service name for PostgreSQL
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=123456
      - SPRING_DATASOURCE_DRIVER-CLASS-NAME=org.postgresql.Driver
    networks:
      - default

  nginx:
    container_name: nginx-container
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
    depends_on:
      - ecommerce-spring-boot-be
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf  # Mount custom Nginx config file
    networks:
      - default

volumes:
  ecommerce-postgresql-db:
  redis-data:  # Added a volume for Redis


#variables:
#  IMAGE_NAME: tonykien2012/demo-gitlab-cicd-app
#  IMAGE_TAG: python-app-1.0
#
#stages:
#  - test
#  - build
#  - deploy
#
#run_tests:
#  stage: test
#  image: python:3.9-slim-buster
#  before_script:
#    - apt-get update && apt-get install make
#  script:
#    - make test
#
#.build:
#  stage: build
#  image: docker:20.10.16
#  services:
#    - docker:20.10.16-dind
#  variables:
#    DOCKER_TLS_CERTDIR: "/certs"
#  before_script:
#    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
#  script:
#    - docker build -t $IMAGE_NAME:v1.0.0-$CI_COMMIT_SHA .
#    - docker push $IMAGE_NAME:v1.0.0-$CI_COMMIT_SHA
#
#build-dev:
#  extends: .build
#  only:
#    - main
#deploy:
#  stage: deploy
#  before_script:
#    - chmod 400 $SSH_KEY
#  script:
#    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY root@35.247.145.253 "
#      docker login -u $REGISTRY_USER -p $REGISTRY_PASS &&
#      docker run -d -p 5000:5000 $IMAGE_NAME:$CI_COMMIT_SHA"
# $ docker run -it --rm --name zookeeper -p 2181:2181 -p 2888:2888 -p 3888:3888 quay.io/debezium/zookeeper:2.7
# $ docker run -it --rm --name kafka -p 9092:9092 --link zookeeper:zookeeper quay.io/debezium/kafka:2.7
# $ docker run -it --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=debezium -e MYSQL_USER=mysqluser -e MYSQL_PASSWORD=mysqlpw quay.io/debezium/example-mysql:2.7
# $ docker run -it --rm --name connect -p 8083:8083 -e GROUP_ID=1 -e CONFIG_STORAGE_TOPIC=my_connect_configs -e OFFSET_STORAGE_TOPIC=my_connect_offsets -e STATUS_STORAGE_TOPIC=my_connect_statuses --link kafka:kafka --link mysql:mysql quay.io/debezium/connect:2.7
# $ docker stop mysqlterm watcher connect mysql kafka zookeeper
# $ docker run -it --rm --name kafka-ui -p 9090:8080 --link kafka:kafka -e KAFKA_CLUSTERS_O_NAME=local -e KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
# https://medium.com/@cloud_geek/run-debezium-kafka-connect-using-docker-kafka-zookeeper-kafdrop-kafka-connect-docker-2e67760ef85d
# docker run -it --rm --name kafka-ui -p 9090:8080 --link kafka:kafka \
#  -e KAFKA_CLUSTERS_0_NAME=local \
#  -e KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092